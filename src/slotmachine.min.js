var startSeqs = {}, startNum = 0;
var midMap = new Map();
var rightMap = new Map();
var leftMap = new Map();

$.fn.playSpin = function (a) { 
    if (this.length) { 
        if ($(this).is(":animated")) return; 
        startSeqs["mainSeq" + ++startNum] = {}, 
        $(this).attr("data-playslot", startNum); 
        var b = this.length, c = 0; 
        "undefined" == typeof a && (a = new Object); 
        var d = []; 
        "undefined" != typeof a.endNum && (d = $.isArray(a.endNum) ? a.endNum : [a.endNum]); 
        for (var e = 0; e < this.length; e++)"undefined" == typeof d[e] && d.push(0); 
        return startSeqs["mainSeq" + startNum].totalSpinning = b, 
        this.each(function () { 
               a.endNum = d[c], 
               startSeqs["mainSeq" + startNum]["subSeq" + ++c] = {}, startSeqs["mainSeq" + startNum]["subSeq" + c].spinning = !0; 
        var e = { total: b, mainSeq: startNum, subSeq: c }; 
        new slotMachine(this, a, e) }) } 
     }, 

$.fn.stopSpin = function () {
     if (this.length) {
           if (!$(this).is(":animated")) return; 
           $(this)[0].hasAttribute("data-playslot") && $.each(startSeqs["mainSeq" + $(this).attr("data-playslot")], 
     function (a, b) { b.spinning = !1 }) } }; 

var slotMachine = function (a, b, c) {
     var d = this; 
     d.$el = $(a), d.defaultOptions = { easing: "swing", time: 3e3, loops: 6, manualStop: !1, stopSeq: "random", endNum: 0, onEnd: $.noop, onFinish: $.noop },
     d.spinSpeed = 0, 
     d.loopCount = 0, 
     d.init = function () { 
                  d.options = $.extend({}, d.defaultOptions, b), d.setup(), d.startSpin() },
     d.setup = function () {
                       var a = d.$el.find("li").first(); 
                       d.liHeight = a.innerHeight(), 
                       d.liCount = d.$el.children().length, 
                       d.listHeight = d.liHeight * d.liCount, 
                       d.spinSpeed = d.options.time / d.options.loops, 
                       a.clone().appendTo(d.$el), 
                       "leftToRight" == d.options.stopSeq ? 1 != c.subSeq && (d.options.manualStop = !0) : "rightToLeft" == d.options.stopSeq && c.total != c.subSeq && (d.options.manualStop = !0) }, 
     d.startSpin = function () { 
                    d.$el.css("top", -d.listHeight).animate({ top: "0px" }, d.spinSpeed, "linear", function () { d.lowerSpeed() }) }, 
     d.lowerSpeed = function () { 
                    d.loopCount++, d.loopCount < d.options.loops || d.options.manualStop && startSeqs["mainSeq" + c.mainSeq]["subSeq" + c.subSeq].spinning ? d.startSpin() : d.endSpin() }, 
     d.endSpin = function () { 
                    0 == d.options.endNum && (d.options.endNum = d.randomRange(1, d.liCount)), 
                    (d.options.endNum < 0 || d.options.endNum > d.liCount) && (d.options.endNum = 1); 
                    var a = -(d.liHeight * d.options.endNum - d.liHeight), 
                    b = 1.5 * d.spinSpeed * d.liCount / d.options.endNum; 
                    d.$el.css("top", -d.listHeight).animate({ top: a+50 }, b, 
                    d.options.easing, 
                    function () { 
                         if (d.$el.find("li").last().remove(), d.endAnimation(d.options.endNum), 
                         $.isFunction(d.options.onEnd) && d.options.onEnd(d.options.endNum), 
                         0 == startSeqs["mainSeq" + c.mainSeq].totalSpinning) { 
                              var a = ""; 
                              $.each(startSeqs["mainSeq" + c.mainSeq], 
                              function (b, c) { 
                                   "object" == typeof c && (a += c.endNum.toString()) }), 
                              $.isFunction(d.options.onFinish) && d.options.onFinish(a) } }) }, 
     d.endAnimation = function (a) { 
                    "leftToRight" == d.options.stopSeq && c.total != c.subSeq ? startSeqs["mainSeq" + c.mainSeq]["subSeq" + (c.subSeq + 1)].spinning = !1 : "rightToLeft" == d.options.stopSeq && 1 != c.subSeq && (startSeqs["mainSeq" + c.mainSeq]["subSeq" + (c.subSeq - 1)].spinning = !1); 
                    startSeqs["mainSeq" + c.mainSeq].totalSpinning--;
                    startSeqs["mainSeq" + c.mainSeq]["subSeq" + c.subSeq].endNum = a; }, 

     d.randomRange = function (a, b) { return Math.floor(Math.random() * (1 + b - a)) + a }, 
     
     this.init() 
};


function getItem(){ 
     var indexes=[]; 
     /*
     marvel machine has three wheels, left, mid and right, and they all have different probabilities of the item.
     returns array [a,b,c], where a,b,c are the index of the item
     */
     var items = spinWheel();
     console.log("spinned!");
     for(var i =0; i<items.length; i++){
          if(i==0){
               console.log(items[i].name);
               indexes.push(leftMap.get(items[i].name)+1);
          }
          else if(i==1){
               console.log(items[i].name);
               indexes.push(midMap.get(items[i].name)+1);
               
          }
          else{
               console.log(items[i].name);
               indexes.push(rightMap.get(items[i].name)+1);
          }
     }
     return indexes;

};

function getDoubleMarvel(){
     let x = math.random();
     // "Mid":"1.00%",
     // "Right":"30.00%",
     // "Left":"69.00%"
     if(x>=0.00 && x<=0.01){
          return "mid";
     }
     else if(x>0.01 && x<=0.31){
          return "right";
     }
     else{
          return "left";
     }

};


$(function() {
     

var sections =["left","mid","right"];
for (var k = 0; k < sections.length; k++) {
     var ul = document.getElementById(sections[k])
     var items = ul.getElementsByTagName("li");
     for (var i = 0; i < items.length; i++) {
          // do something with items[i], which is a <li> element
          //console.log(items[i].childNodes)
          items[i].childNodes[0].setAttribute("data-bs-toggle","tooltip");
          items[i].childNodes[0].setAttribute("data-bs-placement","top");
          items[i].childNodes[0].setAttribute("data-container","body");
          if(k==0){
               leftMap.set(items[i].childNodes[0].getAttribute("title"),i);
          }
          else if(k==1){
               midMap.set(items[i].childNodes[0].getAttribute("title"),i);
               
          }
          else{
               rightMap.set(items[i].childNodes[0].getAttribute("title"),i);

          }
     }
}

var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
  return new bootstrap.Tooltip(tooltipTriggerEl)
})



});